package nro.server.service.model.map;

import javax.swing.*;
import java.awt.*;

public class MapViewer extends JPanel {
    private static final int TILE_SIZE = 24;

    private int[][] tiles;

    public MapViewer(int[][] tiles) {
        this.tiles = tiles;
        int rows = tiles.length;
        int cols = tiles[0].length;
        setPreferredSize(new Dimension(cols * TILE_SIZE, rows * TILE_SIZE));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        for (int row = 0; row < tiles.length; row++) {
            for (int col = 0; col < tiles[row].length; col++) {
                int tile = tiles[row][col];

                // Vẽ màu theo giá trị tile
                g.setColor(getTileColor(tile));
                g.fillRect(col * TILE_SIZE, row * TILE_SIZE, TILE_SIZE, TILE_SIZE);

                // Viền ô
                g.setColor(Color.BLACK);
                g.drawRect(col * TILE_SIZE, row * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            }
        }
    }

    private Color getTileColor(int tile) {
        return switch (tile) {
            case 0 -> Color.WHITE;
            case 33 -> Color.GRAY;
            case 21 -> new Color(139, 69, 19); // nâu
            case 42 -> Color.GREEN.darker();
            default -> Color.CYAN;
        };
    }

    public static void main(String[] args) {
        int width = 68;
        int height = 21;

        int[] flatTiles = new int[]{
                35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 5, 7, 5, 25, 4, 25, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 10, 10, 10, 10, 10, 10, 30, 31, 31, 31, 31, 33, 11, 14, 25, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 11, 11, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 25, 0, 0, 0, 0, 0, 25, 5, 27, 28, 28, 28, 28, 28, 28, 28, 0, 35, 19, 20, 17, 20, 19, 15, 22, 0, 0, 0, 0, 23, 20, 22, 11, 30, 31, 31, 31, 31, 33, 11, 14, 25, 1, 0, 0, 0, 0, 0, 0, 25, 0, 21, 15, 19, 20, 22, 25, 0, 0, 0, 0, 0, 0, 25, 8, 25, 9, 11, 11, 30, 31, 31, 31, 33, 11, 11, 26, 26, 26, 26, 26, 26, 26, 26, 35, 35, 17, 17, 17, 17, 17, 17, 22, 0, 0, 0, 0, 23, 17, 17, 17, 24, 0, 0, 0, 0, 23, 19, 22, 10, 10, 30, 31, 31, 31, 31, 33, 11, 14, 21, 17, 17, 17, 22, 11, 30, 31, 31, 31, 31, 33, 11, 11, 11, 21, 19, 20, 24, 0, 0, 0, 23, 19, 24, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 17, 17, 17, 19, 17, 17, 22, 25, 5, 2, 25, 23, 17, 17, 20, 24, 0, 0, 0, 0, 23, 17, 17, 17, 17, 24, 0, 0, 25, 25, 21, 20, 22, 21, 17, 17, 17, 17, 17, 24, 0, 0, 0, 0, 23, 15, 16, 15, 17, 17, 17, 24, 0, 0, 0, 23, 17, 24, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 17, 20, 17, 17, 17, 17, 22, 11, 11, 11, 11, 11, 17, 17, 17, 24, 0, 0, 0, 0, 23, 17, 20, 17, 19, 24, 0, 9, 11, 11, 21, 17, 22, 21, 17, 20, 17, 17, 17, 24, 0, 0, 0, 0, 23, 17, 17, 17, 17, 17, 17, 24, 2, 25, 5, 23, 19, 24, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 17, 17, 17, 20, 17, 17, 17, 16, 17, 20, 17, 17, 19, 17, 17, 24, 0, 0, 0, 0, 23, 17, 19, 17, 19, 24, 0, 23, 20, 15, 17, 17, 22, 21, 17, 17, 17, 17, 17, 24, 0, 0, 0, 0, 23, 19, 17, 16, 17, 19, 17, 24, 11, 11, 11, 17, 17, 24, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 24, 0, 0, 0, 0, 23, 19, 17, 17, 17, 24, 0, 23, 17, 17, 17, 19, 22, 21, 17, 17, 17, 20, 17, 24, 0, 0, 0, 0, 23, 19, 17, 17, 17, 17, 17, 17, 19, 19, 20, 17, 17, 24, 0, 0, 0, 0, 0, 0, 0, 0, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35
        };

        int[][] tiles = new int[height][width];
        for (int i = 0; i < flatTiles.length; i++) {
            int row = i / width;
            int col = i % width;
            tiles[row][col] = flatTiles[i];
        }

        JFrame frame = new JFrame("Map Viewer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new JScrollPane(new MapViewer(tiles)));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}